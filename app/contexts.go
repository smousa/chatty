// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/smousa/chatty/design
// --out=$(GOPATH)/src/github.com/smousa/chatty
// --version=v1.1.0-dirty
//
// API "chatty": Application Contexts
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
	"net/http"
)

// ParseMessageContext provides the message parse action context.
type ParseMessageContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *ParseMessagePayload
}

// NewParseMessageContext parses the incoming request URL and body, performs validations and creates the
// context used by the message controller parse action.
func NewParseMessageContext(ctx context.Context, r *http.Request, service *goa.Service) (*ParseMessageContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ParseMessageContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// parseMessagePayload is the message parse action payload.
type parseMessagePayload struct {
	Input *string `form:"input,omitempty" json:"input,omitempty" xml:"input,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *parseMessagePayload) Validate() (err error) {
	if payload.Input == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "input"))
	}
	return
}

// Publicize creates ParseMessagePayload from parseMessagePayload
func (payload *parseMessagePayload) Publicize() *ParseMessagePayload {
	var pub ParseMessagePayload
	if payload.Input != nil {
		pub.Input = *payload.Input
	}
	return &pub
}

// ParseMessagePayload is the message parse action payload.
type ParseMessagePayload struct {
	Input string `form:"input" json:"input" xml:"input"`
}

// Validate runs the validation rules defined in the design.
func (payload *ParseMessagePayload) Validate() (err error) {
	if payload.Input == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "input"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *ParseMessageContext) OK(r *ChattyMessageInfo) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/chatty.message_info+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}
